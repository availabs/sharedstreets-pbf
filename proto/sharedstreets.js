'use strict' // code generated by pbf v3.1.0

var RoadClass = exports.RoadClass = {
  'Motorway': 0,
  'Trunk': 1,
  'Primary': 2,
  'Secondary': 3,
  'Tertiary': 4,
  'Residential': 5,
  'Unclassified': 6,
  'Service': 7,
  'Other': 8
}

// Delimiter ========================================

var Delimiter = exports.Delimiter = {}

Delimiter.read = function (pbf, end) {
  return pbf.readFields(Delimiter._readField, {length: 0}, end)
}
Delimiter._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.length = pbf.readVarint()
}
Delimiter.write = function (obj, pbf) {
  if (obj.length) pbf.writeVarintField(1, obj.length)
}

// GISSectionMetadata ========================================

var GISSectionMetadata = exports.GISSectionMetadata = {}

GISSectionMetadata.read = function (pbf, end) {
  return pbf.readFields(GISSectionMetadata._readField, {sectionId: '', sectionProperties: ''}, end)
}
GISSectionMetadata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.sectionId = pbf.readString()
  else if (tag === 2) obj.sectionProperties = pbf.readString()
}
GISSectionMetadata.write = function (obj, pbf) {
  if (obj.sectionId) pbf.writeStringField(1, obj.sectionId)
  if (obj.sectionProperties) pbf.writeStringField(2, obj.sectionProperties)
}

// GISMetadata ========================================

var GISMetadata = exports.GISMetadata = {}

GISMetadata.read = function (pbf, end) {
  return pbf.readFields(GISMetadata._readField, {source: '', sections: []}, end)
}
GISMetadata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.source = pbf.readString()
  else if (tag === 2) obj.sections.push(GISSectionMetadata.read(pbf, pbf.readVarint() + pbf.pos))
}
GISMetadata.write = function (obj, pbf) {
  if (obj.source) pbf.writeStringField(1, obj.source)
  if (obj.sections) for (var i = 0; i < obj.sections.length; i++) pbf.writeMessage(2, GISSectionMetadata.write, obj.sections[i])
}

// WaySection ========================================

var WaySection = exports.WaySection = {}

WaySection.read = function (pbf, end) {
  return pbf.readFields(WaySection._readField, {wayId: 0, roadClass: 0, oneWay: false, roundabout: false, link: false, nodeIds: []}, end)
}
WaySection._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.wayId = pbf.readVarint()
  else if (tag === 2) obj.roadClass = pbf.readVarint()
  else if (tag === 3) obj.oneWay = pbf.readBoolean()
  else if (tag === 4) obj.roundabout = pbf.readBoolean()
  else if (tag === 5) obj.link = pbf.readBoolean()
  else if (tag === 6) pbf.readPackedVarint(obj.nodeIds)
}
WaySection.write = function (obj, pbf) {
  if (obj.wayId) pbf.writeVarintField(1, obj.wayId)
  if (obj.roadClass) pbf.writeVarintField(2, obj.roadClass)
  if (obj.oneWay) pbf.writeBooleanField(3, obj.oneWay)
  if (obj.roundabout) pbf.writeBooleanField(4, obj.roundabout)
  if (obj.link) pbf.writeBooleanField(5, obj.link)
  if (obj.nodeIds) pbf.writePackedVarint(6, obj.nodeIds)
}

// OSMMetadata ========================================

var OSMMetadata = exports.OSMMetadata = {}

OSMMetadata.read = function (pbf, end) {
  return pbf.readFields(OSMMetadata._readField, {waySections: []}, end)
}
OSMMetadata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.waySections.push(WaySection.read(pbf, pbf.readVarint() + pbf.pos))
}
OSMMetadata.write = function (obj, pbf) {
  if (obj.waySections) for (var i = 0; i < obj.waySections.length; i++) pbf.writeMessage(1, WaySection.write, obj.waySections[i])
}

// SharedStreetsMetadata ========================================

var SharedStreetsMetadata = exports.SharedStreetsMetadata = {}

SharedStreetsMetadata.read = function (pbf, end) {
  return pbf.readFields(SharedStreetsMetadata._readField, {geometryID: '', osmMetadata: null, gisMetadata: []}, end)
}
SharedStreetsMetadata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.geometryID = pbf.readString()
  else if (tag === 2) obj.osmMetadata = OSMMetadata.read(pbf, pbf.readVarint() + pbf.pos)
  else if (tag === 3) obj.gisMetadata.push(GISMetadata.read(pbf, pbf.readVarint() + pbf.pos))
}
SharedStreetsMetadata.write = function (obj, pbf) {
  if (obj.geometryID) pbf.writeStringField(1, obj.geometryID)
  if (obj.osmMetadata) pbf.writeMessage(2, OSMMetadata.write, obj.osmMetadata)
  if (obj.gisMetadata) for (var i = 0; i < obj.gisMetadata.length; i++) pbf.writeMessage(3, GISMetadata.write, obj.gisMetadata[i])
}

// SharedStreetsGeometry ========================================

var SharedStreetsGeometry = exports.SharedStreetsGeometry = {}

SharedStreetsGeometry.read = function (pbf, end) {
  return pbf.readFields(SharedStreetsGeometry._readField, {id: '', fromIntersectionId: '', toIntersectionId: '', forwardReferenceId: '', backReferenceId: '', roadClass: 0, latlons: []}, end)
}
SharedStreetsGeometry._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.id = pbf.readString()
  else if (tag === 2) obj.fromIntersectionId = pbf.readString()
  else if (tag === 3) obj.toIntersectionId = pbf.readString()
  else if (tag === 4) obj.forwardReferenceId = pbf.readString()
  else if (tag === 5) obj.backReferenceId = pbf.readString()
  else if (tag === 6) obj.roadClass = pbf.readVarint()
  else if (tag === 7) pbf.readPackedFloat(obj.latlons)
}
SharedStreetsGeometry.write = function (obj, pbf) {
  if (obj.id) pbf.writeStringField(1, obj.id)
  if (obj.fromIntersectionId) pbf.writeStringField(2, obj.fromIntersectionId)
  if (obj.toIntersectionId) pbf.writeStringField(3, obj.toIntersectionId)
  if (obj.forwardReferenceId) pbf.writeStringField(4, obj.forwardReferenceId)
  if (obj.backReferenceId) pbf.writeStringField(5, obj.backReferenceId)
  if (obj.roadClass) pbf.writeVarintField(6, obj.roadClass)
  if (obj.latlons) pbf.writePackedFloat(7, obj.latlons)
}

// LocationReference ========================================

var LocationReference = exports.LocationReference = {}

LocationReference.read = function (pbf, end) {
  return pbf.readFields(LocationReference._readField, {intersectionId: '', lat: 0, lon: 0, inboundBearing: 0, inboundBearing_present: null, outboundBearing: 0, outboundBearing_present: null, distanceToNextRef: 0, distanceToNextRef_present: null}, end)
}
LocationReference._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.intersectionId = pbf.readString()
  else if (tag === 2) obj.lat = pbf.readFloat()
  else if (tag === 3) obj.lon = pbf.readFloat()
  else if (tag === 4) obj.inboundBearing = pbf.readVarint(true), obj.inboundBearing_present = 'inboundBearing'
  else if (tag === 5) obj.outboundBearing = pbf.readVarint(true), obj.outboundBearing_present = 'outboundBearing'
  else if (tag === 6) obj.distanceToNextRef = pbf.readVarint(true), obj.distanceToNextRef_present = 'distanceToNextRef'
}
LocationReference.write = function (obj, pbf) {
  if (obj.intersectionId) pbf.writeStringField(1, obj.intersectionId)
  if (obj.lat) pbf.writeFloatField(2, obj.lat)
  if (obj.lon) pbf.writeFloatField(3, obj.lon)
  if (obj.inboundBearing) pbf.writeVarintField(4, obj.inboundBearing)
  if (obj.outboundBearing) pbf.writeVarintField(5, obj.outboundBearing)
  if (obj.distanceToNextRef) pbf.writeVarintField(6, obj.distanceToNextRef)
}

// SharedStreetsReference ========================================

var SharedStreetsReference = exports.SharedStreetsReference = {}

SharedStreetsReference.read = function (pbf, end) {
  return pbf.readFields(SharedStreetsReference._readField, {id: '', geometryId: '', formOfWay: 0, locationReferences: []}, end)
}
SharedStreetsReference._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.id = pbf.readString()
  else if (tag === 2) obj.geometryId = pbf.readString()
  else if (tag === 3) obj.formOfWay = pbf.readVarint()
  else if (tag === 4) obj.locationReferences.push(LocationReference.read(pbf, pbf.readVarint() + pbf.pos))
}
SharedStreetsReference.write = function (obj, pbf) {
  if (obj.id) pbf.writeStringField(1, obj.id)
  if (obj.geometryId) pbf.writeStringField(2, obj.geometryId)
  if (obj.formOfWay) pbf.writeVarintField(3, obj.formOfWay)
  if (obj.locationReferences) for (var i = 0; i < obj.locationReferences.length; i++) pbf.writeMessage(4, LocationReference.write, obj.locationReferences[i])
}

SharedStreetsReference.FormOfWay = {
  'Undefined': 0,
  'Motorway': 1,
  'MultipleCarriageway': 2,
  'SingleCarriageway': 3,
  'Roundabout': 4,
  'TrafficSquare': 5,
  'SlipRoad': 6,
  'Other': 7
}

// SharedStreetsIntersection ========================================

var SharedStreetsIntersection = exports.SharedStreetsIntersection = {}

SharedStreetsIntersection.read = function (pbf, end) {
  return pbf.readFields(SharedStreetsIntersection._readField, {id: '', nodeId: 0, lat: 0, lon: 0, inboundReferenceIds: [], outboundReferenceIds: []}, end)
}
SharedStreetsIntersection._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.id = pbf.readString()
  else if (tag === 2) obj.nodeId = pbf.readVarint()
  else if (tag === 3) obj.lat = pbf.readFloat()
  else if (tag === 4) obj.lon = pbf.readFloat()
  else if (tag === 5) obj.inboundReferenceIds.push(pbf.readString())
  else if (tag === 6) obj.outboundReferenceIds.push(pbf.readString())
}
SharedStreetsIntersection.write = function (obj, pbf) {
  if (obj.id) pbf.writeStringField(1, obj.id)
  if (obj.nodeId) pbf.writeVarintField(2, obj.nodeId)
  if (obj.lat) pbf.writeFloatField(3, obj.lat)
  if (obj.lon) pbf.writeFloatField(4, obj.lon)
  if (obj.inboundReferenceIds) for (var i = 0; i < obj.inboundReferenceIds.length; i++) pbf.writeStringField(5, obj.inboundReferenceIds[i])
  if (obj.outboundReferenceIds) for (i = 0; i < obj.outboundReferenceIds.length; i++) pbf.writeStringField(6, obj.outboundReferenceIds[i])
}
